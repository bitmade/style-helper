/// Helper to size an element
/// @param {Length} $width The elements width
/// @param {Length} $height [$width] The elements height
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/// Helper to set opacity with legacy-fallback
/// @param {Number} $opacity
@mixin opacity($opacity) {
  $opacity-ie: $opacity * 100;
  opacity: $opacity;
  filter: alpha(opacity=$opacity-ie);
}

/// Helper to center something
///
@mixin centered() {
  transform: translate3d(-50%, -50%, 0);
  position: absolute;
  left: 50%;
  top: 50%;
}

/// Helper for vertical centering
@mixin vertical-centered() {
  transform: translate3d(0, -50%, 0);
  position: absolute;
  top: 50%;
}

/// Helper for horizontal centering
@mixin horizontal-centered() {
  transform: translate3d(-50%, 0, 0);
  position: absolute;
  left: 50%;
}

/// Helper to initalize a proper viewport and text-rendering.
/// @requires $bm-fontsize
/// @requires $bm-lineheight
/// `font-size: $bm-fontsize;`: setting the global base-fontsize
/// `line-height: $bm-lineheight`: setting the global base-lineheight
/// `overflow-y: scroll;`: forcing scrollbars to be visible, prevents weird flickering
/// `min-height: 100%;`: making sure the page fills at least the initial viewport
@mixin page-init() {
  font-size: $bm-fontsize;
  line-height: $bm-lineheight;
  overflow-y: scroll;
  min-height: 100%;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

/// Helper to clear inner floats
/// @author Nicolas Gallagher
/// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

/// Helper to make something disappear
@mixin vanish {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}


/// Helper to deal with positions and its values (top, bottom, right, left)
/// @param {String} $position - The targets position, e.g. absolute
/// @param {List} $args - List of properties and their values, e.g. top 1em right 10%
/// @example scss - Setting an element with an absolute position and some values
///   @include position(absolute, top 10px, left 10px);
/// @link http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/ Mixin by Hugo Giraudel
@mixin position($position, $args) {

  // List of offsets to check for in $args
  $offsets: top right bottom left;

  // We loop through $offsets to deal with them one by one
  @each $offset in $offsets {

    // If current offset found in $args assigns its index to $i
    // Or `false` if not found
    $i: index($args, $offset);


    // Now we do the verifications
    // 1. Is the offset listed in $args? (not false)
    // 2. Is the offset value within the list range?
    // 3. Is the offset value valid?
    @if $i                                        // 1
    and $i + 1 <= length($args)                   // 2
    and type-of( nth($args, $i + 1) ) == number { // 3

      // If everything is okay
      // We assign the according value to the current offset
      #{$offset}: nth($args, $i + 1);
    }
  }

  // setting the $position parameter
  position: $position;
}

/// Shortcut-Mixin for absolute positioning
/// @param {List} $args - List of properties and their values, e.g. top 1em right 10%
/// @requires {mixin} position
@mixin absolute($args) {
  @include position(absolute, $args);
}

/// Shortcut-Mixin for fixed positioning
/// @param {List} $args - List of properties and their values, e.g. top 1em right 10%
/// @requires {mixin} position
@mixin fixed($args) {
  @include position(fixed, $args);
}

/// Shortcut-Mixin for relative positioning
/// @param {List} $args - List of properties and their values, e.g. top 1em right 10%
/// @requires {mixin} position
@mixin relative($args) {
  @include position(relative, $args);
}

/// Helper to make an Element fill up all of its available space
/// @requires {mixin} absolute
@mixin fill-abs() {
  @include absolute(top 100% right 100% bottom 100% left 100%);
}